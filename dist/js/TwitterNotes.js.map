{"version":3,"sources":["TwitterNotes.js"],"names":["console","log","API_URL_BASE","timelinelineFormEl","document","querySelector","quickSearchFormEl","setupEventListeners","timelineBtnEl","timelineformEl","addEventListener","handleTimelinesearch","event","preventDefault","screenName","axios","get","params","op","screen_name","then","handleTimelineSearchResults","timelineResult","displayTweets","response","data","tweetArray","resultsEl","innerHTML","i","lentgh","li","createElement","p","tweet","textContent","text","appendChild"],"mappings":";;AAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA;;AAAC,CAAC,YAAU;AAAE;AACVD,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAb;AACA,MAAMC,YAAY,GAAE,oBAApB,CAFQ,CAGR;;AACA,MAAMC,kBAAkB,GAAGC,QAAQ,CAACC,aAAT,CAAuB,sBAAvB,CAA3B;AAEA,MAAMC,iBAAiB,GAAGF,QAAQ,CAACC,aAAT,CAAuB,sBAAvB,CAA1B,CANQ,CAQR;AACA;;AACA,WAASE,mBAAT,GAA8B;AAC1B,QAAMC,aAAa,GAAGC,cAAc,CAACJ,aAAf,CAA6B,QAA7B,CAAtB;AACAG,IAAAA,aAAa,CAACE,gBAAd,CAA+B,OAA/B,EAAwCC,oBAAxC,EAF0B,CAI1B;AACH,GAfO,CAkBT;;;AAEC,WAASA,oBAAT,CAA8BC,KAA9B,EAAoC;AAAE;AAClC;AACAA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAMC,UAAU,GAAGX,kBAAkB,CAACE,aAAnB,CAAiC,mBAAjC,CAAnB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBa,UAAnC,EAJgC,CAKhC;;AACAC,IAAAA,KAAK,CAACC,GAAN,CAAUd,YAAV,EAAuB;AACnBe,MAAAA,MAAM,EAAE;AACJ;AACAC,QAAAA,EAAE,EAAE,eAFA;AAGJC,QAAAA,WAAW,EAAEL,UAHT,CAGoB;;AAHpB;AADW,KAAvB,EAMGM,IANH,CAMQC,2BANR;AAOH,GAjCO,CAmCX;AACE;;;AAEC,WAASA,2BAAT,CAAqCC,cAArC,EAAoD;AAAE;AAClDtB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCqB,cAAvC,EADgD,CAGhD;;AACAC,IAAAA,aAAa,CAACC,QAAQ,CAACC,IAAV,EAAgBhB,cAAc,CAACJ,aAAf,CAA6B,aAA7B,CAAhB,CAAb,CAJgD,CAKhD;AACA;AACA;AACH,GA9CO,CAgDR;;;AAEA,WAASkB,aAAT,CAAuBG,UAAvB,EAAmCC,SAAnC,EAA6C;AAAE;AACC;AAC5C3B,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+ByB,UAA/B,EAA2CC,SAA3C;AAEAA,IAAAA,SAAS,CAACC,SAAV,GAAsB,GAAtB,CAJyC,CAId;;AAE3B,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,UAAU,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAsC;AAClC,UAAME,EAAE,GAAG3B,QAAQ,CAAC4B,aAAT,CAAuB,IAAvB,CAAX;AACA,UAAMC,CAAC,GAAG7B,QAAQ,CAAC4B,aAAT,CAAuB,GAAvB,CAAV;AACA,UAAME,KAAK,GAAGR,UAAU,CAACG,CAAD,CAAxB;AACAI,MAAAA,CAAC,CAACE,WAAF,GAAgBD,KAAK,CAACE,IAAtB;AACAL,MAAAA,EAAE,CAACM,WAAH,CAAeJ,CAAf;AACAN,MAAAA,SAAS,CAACU,WAAV,CAAsBN,EAAtB;AACH;AACJ;;AAEDxB,EAAAA,mBAAmB;AAEtB,CApEA,I,CAsED;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACI;AACA;AACJ;AACA;AACA;AACI;AACJ;AACI;AACJ;AACI;AACJ;AACI;AACJ;AACI;AACA;AACA;AACJ;AACI;AACA;AACA;AACA;AACJ;AACI;AACJ;AACI;AACA;AACJ;AACI;AACA;AACA;AAEJ;AACI;AACA;AACC;AACA;AACD;AACI;AACJ;AACI;AACJ;AACI;AACA;AACR;AACK;;AAGL","sourcesContent":["console.log(\"hello chello\");\n\n;(function(){ // ;( <-- starting it with ; seperates it from other code\n    console.log ('twitter-notes');\n    const API_URL_BASE= '/twitter-proxy.php'\n    //you can query by <form> and target its children elements\n    const timelinelineFormEl = document.querySelector('form[name=\"timeline]')\n    \n    const quickSearchFormEl = document.querySelector('form[name=\"timeline]')\n    \n    //for cleanliness, its time to start declaring local variables where they belong\n    // all elements that have an event listener can go in here (all buttons)\n    function setupEventListeners(){\n        const timelineBtnEl = timelineformEl.querySelector('button')\n        timelineBtnEl.addEventListener('click', handleTimelinesearch)\n\n        // do the same for each bytton\n    }\n\n\n   //needs 3 handle\"Timelinesearch\"functions for the 3 different types of forms:\n\n    function handleTimelinesearch(event){ //changes value and calls getData function \n        //presents the browser from doing default behavior like refreshing/loading/ etc\n        event.preventDefault()\n        const screenName = timelinelineFormEl.querySelector(\"[name=screenname]\")\n        console.log('fetching with GET:' + screenName)\n        //axios go to this url, lok at the paramets, match the one I want, then call this function \n        axios.get(API_URL_BASE,{\n            params: { \n                //twitter_variables: my variables \n                op: 'user_timeline',\n                screen_name: screenName //my variable (key, seach-term, etc) \n            }\n        }).then(handleTimelineSearchResults)\n    }\n   \n //needs only 2 event listener response handlers for the 2 different types of api calls \n   //the 3rd api call will get same data from the results/params of the other 2, doesn't need its own handler, nest it inside the proper one\n\n    function handleTimelineSearchResults(timelineResult){ //updates and displays new values \n        console.log('timeline search results', timelineResult)\n       \n        //call function and pass these two items as its parameters\n        displayTweets(response.data, timelineformEl.querySelector('.results ul'))\n        //const tweetArray = response.data\n        //const resultsEl - timelineFormEl.querySelector('.results ul'))\n        //aka displayTweets(tweetarray, resultsel)\n    }\n\n    //only need one of these to handle all results\n    \n    function displayTweets(tweetArray, resultsEl){ //parameters(which array / which results <div>) \n                                                    //are defined in the handler function that calls this one. \n        console.log(\"showing tweets,\", tweetArray, resultsEl)\n\n        resultsEl.innerHTML = \" \"; //hacky shortcut to clear results div \n\n        for(let i=0; i<tweetArray.lentgh; i++){\n            const li = document.createElement('li')\n            const p = document.createElement('p')\n            const tweet = tweetArray[i]\n            p.textContent = tweet.text\n            li.appendChild(p)\n            resultsEl.appendChild(li)\n        }\n    }\n\n    setupEventListeners()\n\n})()\n\n//hint: regEXP goes in display tweets only \n// reg expresisons help parse and normalize data \n// reg ex linking:\n//create a reg expression that finds patterns (i.e all handles have @)\n//define the strings as urls and make them live\n//enable highlighting of keyword in results. (keyword.style.color = \"\")\n\n\n//types of reg ex [order matters!]\n// /abc/.test('abc')\n// abc.match(/abc/)\n// data.match(/ABC/i)  the /i ignores case spelling \n// data.match(/abc/g) the /g returns all instances in an array\n// data.match(/test/ig)  returns all any-case instances of \"test\" in an array\n// data.match(/(test group)/ig) returns (test group) in a group   \n// data.match(/(test)(group)/ig) returns all seperate any-case instances of (\"test\") and (\"group\") in an respective group array \n\n//LOOKING FOR A TWEET HANDLE \n    // /@-symbol,\\s= whitespace [\\S= no-whitespace]\n    //tweet.match(/@\\s/) >> show me any @symbol followed by whitespace\n//OR\n//tweet.match(/\\s@/) >> show me any whitepsace followed by @ symbol\n//OR [\\S= no-whitespace]\n    //tweet.match(/\\S@/) >> show me any non-whitepsace that is followed by @ symbol\n//BETTER\n    //tweet.match(/@\\S/) >> show me any @ symbol that is followed by a non-whitepsace\n//EVEN BETTER [+ = match one or more characters of the previous expression ]\n    //tweet.match(/@\\S+/) >> show me any @ symbol that is followed by [+ (one or more)] non-whitepsace\n//ALTERNATE [* = match 0 or more characters of the previous expression ]\n    //tweet.match(/@\\S*/) >> show me any @ symbol that is followed by [* (0 or more)] non-whitepsace\n///COMBOS\n    //\\d=any number, {3} amount of #s looking for in this group, \\D= non number, *= any (if any) \n    // (\\(d{3}\\D*(\\d{3})\\D*(\\d{4})/ >> show me a group of 3#'s, any non numberical thing (if any) [x2] abd a group of four numbers >> i.e 404-444-4444 \n    //(\\(d{3}\\D*(\\d{3})\\D*(\\d{4})/ >> i.e 404-444-4444 \n///RANGES\n    // brackets are serach parameters\n    //tweet.match(/@[a-z0-9]+/i) >> show me @ [followed by any *single* character found in this range] +[or more]/i = ignoring case spelling \n    // \\w = word\n    //tweet.match(/@\\w+/g) >> show me @ followed by any word and group those words into an array \n//HASTAGS\n    //tweet.match(/#\\w+)>>>> show me # followed by any word \n//VARIABLES\n    // var handleRegex =/@\\w+/g\n    //tweet.match(handleRegex)  \n//PASSING STRINGS (hint: keyword highlighting)\n    //written in strings, use \\ to escape \"\" and include following character as special character\n    // var handleRegex2 = new RegExp(\"@\\\\w+\",\"g\") >>[is equal to var handleRegex = /@\\w+/g]\n    //tweet.match(handleRegex2)  \n\n//LINKING/HIGHLIGHTING RESULTS\n    //REPLACE PRINTS RESULTS AS $VARs\n    //tweet.replace ('a'[with],'b')\n     //replace a regEX expresion result with a string or something else: \n     //tweet.replace ('/breaking news/,'BREAKING NEWS')\n    //replace ALL regEX expresion results with a string: \n        //tweet.replace ('/breaking news/g,'BREAKING NEWS')\n    //REPLACE WIH URLS: \n        //i.e: tweet.replace ('/(@\\w+)/g,'$3 $1') \n    //finds groups of [at symbols and words]/put in array \n        //i.e results = (3) 1: APPLE 2:ORANGE 3: GRAPE\n        //tweet.replace ('/(@\\w+)/g,'$3 $1') >>  //i.e results = (3) 1: GRAPE 2:ORANGE 3: APPLE\n// ADD ELEMENTS..\n     //tweet.replace ('/(@\\w+)/g,<span>$3</span>) //i.e results = ((3) 1: APPLE 2:ORANGE 3: <span> GRAPE </span>\n       \n\n/* function displayTweets(tweetArray, resultsEl){ \n    console.log(\"showing tweets,\", tweetArray, resultsEl)\n    resultsEl.innerHTML = \" \"; //hacky shortcut to clear results div \n    for(let i=0; i<tweetArray.lentgh; i++){\n        const li = document.createElement('li')\n        const p = document.createElement('p')\n        const tweet = tweetArray[i]\n\n  **NEW**>>>  let highlightedTweet = tweet.text//use regex to highlight the user's keyword and make               any urls, handles, or hashtags into linkas using highlightedTweet.replace()\n\n        p.textContent = tweet.text\n        li.appendChild(p)\n        resultsEl.appendChild(li)\n    }\n}*/"],"file":"TwitterNotes.js"}