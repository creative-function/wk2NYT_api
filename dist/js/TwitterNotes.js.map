{"version":3,"sources":["TwitterNotes.js"],"names":["console","log","API_URL_BASE","timelinelineFormEl","document","querySelector","quickSearchFormEl","setupEventListeners","timelineBtnEl","timelineformEl","addEventListener","handleTimelinesearch","event","preventDefault","screenName","axios","get","params","op","screen_name","then","handleTimelineSearchResults","timelineResult","displayTweets","response","data","tweetArray","resultsEl","innerHTML","i","lentgh","li","createElement","p","tweet","textContent","text","appendChild"],"mappings":";;AAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEA;;AAAC,CAAC,YAAU;AAAE;AACVD,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAb;AACA,MAAMC,YAAY,GAAE,oBAApB,CAFQ,CAGR;;AACA,MAAMC,kBAAkB,GAAGC,QAAQ,CAACC,aAAT,CAAuB,sBAAvB,CAA3B;AAEA,MAAMC,iBAAiB,GAAGF,QAAQ,CAACC,aAAT,CAAuB,sBAAvB,CAA1B,CANQ,CAQR;AACA;;AACA,WAASE,mBAAT,GAA8B;AAC1B,QAAMC,aAAa,GAAGC,cAAc,CAACJ,aAAf,CAA6B,QAA7B,CAAtB;AACAG,IAAAA,aAAa,CAACE,gBAAd,CAA+B,OAA/B,EAAwCC,oBAAxC,EAF0B,CAI1B;AACH,GAfO,CAkBT;;;AAEC,WAASA,oBAAT,CAA8BC,KAA9B,EAAoC;AAAE;AAClC;AACAA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAMC,UAAU,GAAGX,kBAAkB,CAACE,aAAnB,CAAiC,mBAAjC,CAAnB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBa,UAAnC,EAJgC,CAKhC;;AACAC,IAAAA,KAAK,CAACC,GAAN,CAAUd,YAAV,EAAuB;AACnBe,MAAAA,MAAM,EAAE;AACJ;AACAC,QAAAA,EAAE,EAAE,eAFA;AAGJC,QAAAA,WAAW,EAAEL,UAHT,CAGoB;;AAHpB;AADW,KAAvB,EAMGM,IANH,CAMQC,2BANR;AAOH,GAjCO,CAmCX;AACE;;;AAEC,WAASA,2BAAT,CAAqCC,cAArC,EAAoD;AAAE;AAClDtB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCqB,cAAvC,EADgD,CAGhD;;AACAC,IAAAA,aAAa,CAACC,QAAQ,CAACC,IAAV,EAAgBhB,cAAc,CAACJ,aAAf,CAA6B,aAA7B,CAAhB,CAAb,CAJgD,CAKhD;AACA;AACA;AACH,GA9CO,CAgDR;;;AAEA,WAASkB,aAAT,CAAuBG,UAAvB,EAAmCC,SAAnC,EAA6C;AAAE;AACC;AAC5C3B,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+ByB,UAA/B,EAA2CC,SAA3C;AAEAA,IAAAA,SAAS,CAACC,SAAV,GAAsB,GAAtB,CAJyC,CAId;;AAE3B,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,UAAU,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAsC;AAClC,UAAME,EAAE,GAAG3B,QAAQ,CAAC4B,aAAT,CAAuB,IAAvB,CAAX;AACA,UAAMC,CAAC,GAAG7B,QAAQ,CAAC4B,aAAT,CAAuB,GAAvB,CAAV;AACA,UAAME,KAAK,GAAGR,UAAU,CAACG,CAAD,CAAxB;AACAI,MAAAA,CAAC,CAACE,WAAF,GAAgBD,KAAK,CAACE,IAAtB;AACAL,MAAAA,EAAE,CAACM,WAAH,CAAeJ,CAAf;AACAN,MAAAA,SAAS,CAACU,WAAV,CAAsBN,EAAtB;AACH;AACJ;;AAEDxB,EAAAA,mBAAmB;AAEtB,CApEA,I,CAsED;AACA;AACA;AACA;AACA;AAGA;AACA;AACA","sourcesContent":["console.log(\"hello chello\");\n\n;(function(){ // ;( <-- starting it with ; seperates it from other code\n    console.log ('twitter-notes');\n    const API_URL_BASE= '/twitter-proxy.php'\n    //you can query by <form> and target its children elements\n    const timelinelineFormEl = document.querySelector('form[name=\"timeline]')\n    \n    const quickSearchFormEl = document.querySelector('form[name=\"timeline]')\n    \n    //for cleanliness, its time to start declaring local variables where they belong\n    // all elements that have an event listener can go in here (all buttons)\n    function setupEventListeners(){\n        const timelineBtnEl = timelineformEl.querySelector('button')\n        timelineBtnEl.addEventListener('click', handleTimelinesearch)\n\n        // do the same for each bytton\n    }\n\n\n   //needs 3 handle\"Timelinesearch\"functions for the 3 different types of forms:\n\n    function handleTimelinesearch(event){ //changes value and calls getData function \n        //presents the browser from doing default behavior like refreshing/loading/ etc\n        event.preventDefault()\n        const screenName = timelinelineFormEl.querySelector(\"[name=screenname]\")\n        console.log('fetching with GET:' + screenName)\n        //axios go to this url, lok at the paramets, match the one I want, then call this function \n        axios.get(API_URL_BASE,{\n            params: { \n                //twitter_variables: my variables \n                op: 'user_timeline',\n                screen_name: screenName //my variable (key, seach-term, etc) \n            }\n        }).then(handleTimelineSearchResults)\n    }\n   \n //needs only 2 event listener response handlers for the 2 different types of api calls \n   //the 3rd api call will get same data from the results/params of the other 2, doesn't need its own handler, nest it inside the proper one\n\n    function handleTimelineSearchResults(timelineResult){ //updates and displays new values \n        console.log('timeline search results', timelineResult)\n       \n        //call function and pass these two items as its parameters\n        displayTweets(response.data, timelineformEl.querySelector('.results ul'))\n        //const tweetArray = response.data\n        //const resultsEl - timelineFormEl.querySelector('.results ul'))\n        //aka displayTweets(tweetarray, resultsel)\n    }\n\n    //only need one of these to handle all results\n    \n    function displayTweets(tweetArray, resultsEl){ //parameters(which array / which results <div>) \n                                                    //are defined in the handler function that calls this one. \n        console.log(\"showing tweets,\", tweetArray, resultsEl)\n\n        resultsEl.innerHTML = \" \"; //hacky shortcut to clear results div \n\n        for(let i=0; i<tweetArray.lentgh; i++){\n            const li = document.createElement('li')\n            const p = document.createElement('p')\n            const tweet = tweetArray[i]\n            p.textContent = tweet.text\n            li.appendChild(p)\n            resultsEl.appendChild(li)\n        }\n    }\n\n    setupEventListeners()\n\n})()\n\n// reg expresisons help parse and normalize data \n// reg ex linking:\n//create a reg expression that finds patterns (i.e all handles have @)\n//define the strings as urls and make them live\n//enable highlighting of keyword in results. (keyword.style.color = \"\")\n\n\n//types of reg ex\n// /abc/.test('abc')\n// abc.match(/abc/)"],"file":"TwitterNotes.js"}